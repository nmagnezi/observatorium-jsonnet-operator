apiVersion: v1
kind: Template
metadata:
  name: observatorium
objects:
- apiVersion: v1
  data:
    config.yaml: |-
      "auth_enabled": false
      "frontend":
        "align_queries_with_step": true
        "cache_results": true
        "compress_responses": true
        "results_cache":
          "cache":
            "enable_fifocache": true
            "fifocache":
              "size": 1024
              "validity": "6h"
          "max_freshness": "1m"
        "split_queries_by_day": true
      "http_prefix": null
      "server":
        "http_listen_port": 9090
      "target": "query-frontend"
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: cortex-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-8533a216
    name: observatorium-cortex-query-frontend
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: cortex-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-8533a216
    name: observatorium-cortex-query-frontend
    namespace: ${NAMESPACE}
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: cortex-query-frontend
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: cortex-query-frontend
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: master-8533a216
      spec:
        containers:
        - args:
          - -config.file=/etc/cache-config/config.yaml
          - -frontend.downstream-url=http://observatorium-thanos-query.${NAMESPACE}.svc.cluster.local.:9090
          image: quay.io/cortexproject/cortex:master-8533a216
          name: cortex-query-frontend
          ports:
          - containerPort: 9090
            name: http
          resources:
            limits:
              cpu: ${THANOS_QUERIER_CACHE_CPU_LIMIT}
              memory: ${THANOS_QUERIER_CACHE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERIER_CACHE_CPU_REQUEST}
              memory: ${THANOS_QUERIER_CACHE_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/cache-config/
            name: query-cache-config
            readOnly: false
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}",
            "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${JAEGER_PROXY_CPU_LIMITS}
              memory: ${JAEGER_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${JAEGER_PROXY_CPU_REQUEST}
              memory: ${JAEGER_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-cache-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-cache-proxy
            readOnly: false
        volumes:
        - configMap:
            name: observatorium-cortex-query-frontend
          name: query-cache-config
        - name: query-cache-tls
          secret:
            secretName: query-cache-tls
        - name: query-cache-proxy
          secret:
            secretName: query-cache-proxy
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: cortex-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-8533a216
    name: query-cache-proxy
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-cache-tls
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: cortex-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-8533a216
    name: observatorium-cortex-query-frontend
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 9090
      targetPort: 9090
    - name: https
      port: 9091
      targetPort: https
    selector:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: cortex-query-frontend
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 10902
      targetPort: http
    selector:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-compact
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - compact
          - --wait
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/compact
          - --debug.accept-malformed-index
          - --retention.resolution-raw=14d
          - --retention.resolution-5m=1s
          - --retention.resolution-1h=1s
          - --downsampling.disable
          - |
            --tracing.config=
              type: JAEGER
              config:
                service_name: thanos-compact
                sampler_type: ratelimiting
                sampler_param: 2
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-compact
          ports:
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_COMPACTOR_CPU_LIMIT}
              memory: ${THANOS_COMPACTOR_MEMORY_LIMIT}
            replicas: ${{THANOS_COMPACTOR_REPLICAS}}
            requests:
              cpu: ${THANOS_COMPACTOR_CPU_REQUEST}
              memory: ${THANOS_COMPACTOR_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /var/thanos/compact
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 5778
            name: configs
          - containerPort: 14271
            name: metrics
        terminationGracePeriodSeconds: 120
        volumes:
        - emptyDir: {}
          name: data
    volumeClaimTemplates: null
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_QUERIER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-layer
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-query
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-query
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - query
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:9090
          - --query.replica-label=prometheus_replica
          - --query.replica-label=ruler_replica
          - --query.replica-label=replica
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-rule.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-receive-default.${NAMESPACE}.svc.cluster.local
          - --web.external-prefix=/ui/v1/metrics
          - |
            --tracing.config=
              type: JAEGER
              config:
                service_name: thanos-query
                sampler_type: ratelimiting
                sampler_param: 2
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          name: thanos-query
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 9090
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_QUERIER_CPU_LIMIT}
              memory: ${THANOS_QUERIER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERIER_CPU_REQUEST}
              memory: ${THANOS_QUERIER_MEMORY_REQUEST}
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}",
            "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${JAEGER_PROXY_CPU_LIMITS}
              memory: ${JAEGER_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${JAEGER_PROXY_CPU_REQUEST}
              memory: ${JAEGER_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-proxy
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 5778
            name: configs
          - containerPort: 14271
            name: metrics
        terminationGracePeriodSeconds: 120
        volumes:
        - name: query-tls
          secret:
            secretName: query-tls
        - name: query-proxy
          secret:
            secretName: query-proxy
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: query-proxy
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-tls
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: grpc
    - name: http
      port: 9090
      targetPort: http
    - name: https
      port: 9091
      targetPort: https
    selector:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    hashrings.json: |-
      [
        {
          "hashring": "default",
          "tenants": [

          ]
        }
      ]
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller-tenants
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: kubernetes-controller
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive-controller
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --configmap-name=observatorium-thanos-receive-controller-tenants
          - --configmap-generated-name=observatorium-thanos-receive-controller-tenants-generated
          - --file-name=hashrings.json
          - --namespace=$(NAMESPACE)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${THANOS_RECEIVE_CONTROLLER_IMAGE}:${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
          name: thanos-receive-controller
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 64m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 24Mi
        serviceAccount: observatorium-thanos-receive-controller
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - list
    - watch
    - get
    - create
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: observatorium-thanos-receive-controller
  subjects:
  - kind: ServiceAccount
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: observatorium-thanos-receive-default
    namespace: ${NAMESPACE}
  spec:
    maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
        controller.receive.thanos.io/hashring: default
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      controller.receive.thanos.io/hashring: default
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io: thanos-receive-controller
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_RECEIVE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
        controller.receive.thanos.io/hashring: default
    serviceName: observatorium-thanos-receive-default
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          controller.receive.thanos.io/hashring: default
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - receive
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --remote-write.address=0.0.0.0:19291
          - --receive.replication-factor=3
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --tsdb.path=/var/thanos/receive
          - --label=replica="$(NAME)"
          - --label=receive="true"
          - --receive.local-endpoint=http://$(NAME).observatorium-thanos-receive-default.$(NAMESPACE).svc.cluster.local:19291/api/v1/receive
          - --tsdb.retention=6h
          - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
          - |
            --tracing.config=
              type: JAEGER
              config:
                service_name: thanos-receive
                sampler_type: ratelimiting
                sampler_param: 2
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-receive
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 19291
            name: remote-write
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RECEIVE_CPU_LIMIT}
              memory: ${THANOS_RECEIVE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RECEIVE_CPU_REQUEST}
              memory: ${THANOS_RECEIVE_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /var/thanos/receive
            name: data
            readOnly: false
          - mountPath: /var/lib/thanos-receive
            name: hashring-config
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 5778
            name: configs
          - containerPort: 14271
            name: metrics
        terminationGracePeriodSeconds: 120
        volumes: null
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          controller.receive.thanos.io/hashring: default
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: gp2-encrypted
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: grpc
    - name: http
      port: 10902
      targetPort: http
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop="rule_replica"
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${NAMESPACE}.svc.cluster.local
          - |
            --tracing.config=
              type: JAEGER
              config:
                service_name: thanos-rule
                sampler_type: ratelimiting
                sampler_param: 2
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 18
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 5778
            name: configs
          - containerPort: 14271
            name: metrics
        volumes:
        - emptyDir: {}
          name: data
    volumeClaimTemplates: null
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-store
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-store
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-store
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - store
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - |
            --tracing.config=
              type: JAEGER
              config:
                service_name: thanos-store
                sampler_type: ratelimiting
                sampler_param: 2
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 5778
            name: configs
          - containerPort: 14271
            name: metrics
        terminationGracePeriodSeconds: 120
        volumes: null
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: gp2-encrypted
- apiVersion: v1
  kind: Service
  metadata:
    name: observatorium-thanos-receive
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/name: thanos-receive
- apiVersion: v1
  data:
    authorize_url: ""
    client_id: ""
    client_secret: ""
    oidc_issuer: ""
  kind: Secret
  metadata:
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: telemeter-server-shared
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: external
      port: 8443
      targetPort: external
    - name: internal
      port: 8081
      targetPort: internal
    - name: cluster
      port: 8082
      targetPort: cluster
    selector:
      k8s-app: telemeter-server
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: telemeter-server
    namespace: ${NAMESPACE}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      endpoint: metrics
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      interval: 30s
      port: internal
      scheme: https
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        serverName: telemeter-server.${NAMESPACE}.svc
    jobLabel: k8s-app
    selector:
      matchLabels:
        k8s-app: telemeter-server
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      endpoint: federate
      k8s-app: telemeter-server
    name: telemeter-server-federate
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      honorLabels: true
      interval: 15s
      params:
        match[]:
        - '{__name__=~".*"}'
      path: /federate
      port: internal
      scheme: https
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        serverName: telemeter-server.${NAMESPACE}.svc
    jobLabel: k8s-app
    selector:
      matchLabels:
        k8s-app: telemeter-server
- apiVersion: apps/v1beta2
  kind: StatefulSet
  metadata:
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    podManagementPolicy: Parallel
    replicas: 10
    selector:
      matchLabels:
        k8s-app: telemeter-server
    serviceName: telemeter-server
    template:
      metadata:
        labels:
          k8s-app: telemeter-server
      spec:
        containers:
        - command:
          - /usr/bin/telemeter-server
          - --join=telemeter-server
          - --name=$(NAME)
          - --listen=0.0.0.0:8443
          - --listen-internal=0.0.0.0:8081
          - --listen-cluster=0.0.0.0:8082
          - --shared-key=/etc/pki/service/tls.key
          - --tls-key=/etc/pki/service/tls.key
          - --tls-crt=/etc/pki/service/tls.crt
          - --internal-tls-key=/etc/pki/service/tls.key
          - --internal-tls-crt=/etc/pki/service/tls.crt
          - --authorize=${AUTHORIZE_URL}
          - --oidc-issuer=$(OIDC_ISSUER)
          - --client-id=$(CLIENT_ID)
          - --client-secret=$(CLIENT_SECRET)
          - --memcached=memcached-0.memcached.${NAMESPACE}.svc.cluster.local:11211
          - --whitelist={__name__=~"cluster:usage:.*"}
          - --whitelist={__name__="up"}
          - --whitelist={__name__="cluster_version"}
          - --whitelist={__name__="cluster_version_available_updates"}
          - --whitelist={__name__="cluster_operator_up"}
          - --whitelist={__name__="cluster_operator_conditions"}
          - --whitelist={__name__="cluster_version_payload"}
          - --whitelist={__name__="cluster_installer"}
          - --whitelist={__name__="cluster_infrastructure_provider"}
          - --whitelist={__name__="cluster_feature_set"}
          - --whitelist={__name__="node_uname_info"}
          - --whitelist={__name__="instance:etcd_object_counts:sum"}
          - --whitelist={__name__="alerts",alertstate="firing"}
          - --whitelist={__name__="code:apiserver_request_count:rate:sum"}
          - --whitelist={__name__="cluster:capacity_cpu_cores:sum"}
          - --whitelist={__name__="cluster:capacity_memory_bytes:sum"}
          - --whitelist={__name__="cluster:cpu_usage_cores:sum"}
          - --whitelist={__name__="cluster:memory_usage_bytes:sum"}
          - --whitelist={__name__="openshift:cpu_usage_cores:sum"}
          - --whitelist={__name__="openshift:memory_usage_bytes:sum"}
          - --whitelist={__name__="workload:cpu_usage_cores:sum"}
          - --whitelist={__name__="workload:memory_usage_bytes:sum"}
          - --whitelist={__name__="cluster:virt_platform_nodes:sum"}
          - --whitelist={__name__="cluster:node_instance_type_count:sum"}
          - --whitelist={__name__="cnv:vmi_status_running:count"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_cores:sum"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_sockets:sum"}
          - --whitelist={__name__="subscription_sync_total"}
          - --whitelist={__name__="csv_succeeded"}
          - --whitelist={__name__="csv_abnormal"}
          - --whitelist={__name__="ceph_cluster_total_bytes"}
          - --whitelist={__name__="ceph_cluster_total_used_raw_bytes"}
          - --whitelist={__name__="ceph_health_status"}
          - --whitelist={__name__="job:ceph_osd_metadata:count"}
          - --whitelist={__name__="job:kube_pv:count"}
          - --whitelist={__name__="job:ceph_pools_iops:total"}
          - --whitelist={__name__="job:ceph_pools_iops_bytes:total"}
          - --whitelist={__name__="job:ceph_versions_running:count"}
          - --whitelist={__name__="job:noobaa_total_unhealthy_buckets:sum"}
          - --whitelist={__name__="job:noobaa_bucket_count:sum"}
          - --whitelist={__name__="job:noobaa_total_object_count:sum"}
          - --whitelist={__name__="noobaa_accounts_num"}
          - --whitelist={__name__="noobaa_total_usage"}
          - --whitelist={__name__="console_url"}
          - --whitelist={__name__="cluster:network_attachment_definition_instances:max"}
          - --whitelist={__name__="cluster:network_attachment_definition_enabled_instance_up:max"}
          - --whitelist={__name__="insightsclient_request_send_total"}
          - --whitelist={__name__="cam_app_workload_migrations"}
          - --elide-label=prometheus_replica
          - --token-expire-seconds=3600
          - --forward-url=${TELEMETER_FORWARD_URL}
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                key: oidc_issuer
                name: telemeter-server
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client_secret
                name: telemeter-server
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client_id
                name: telemeter-server
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
          name: telemeter-server
          ports:
          - containerPort: 8443
            name: external
          - containerPort: 8081
            name: internal
          - containerPort: 8082
            name: cluster
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8443
              scheme: HTTPS
          resources:
            limits:
              cpu: ${TELEMETER_SERVER_CPU_LIMIT}
              memory: ${TELEMETER_SERVER_MEMORY_LIMIT}
            requests:
              cpu: ${TELEMETER_SERVER_CPU_REQUEST}
              memory: ${TELEMETER_SERVER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/pki/service
            name: telemeter-server-tls
            readOnly: false
        serviceAccountName: telemeter-server
        volumes:
        - name: secret-telemeter-server
          secret:
            secretName: telemeter-server
        - name: telemeter-server-tls
          secret:
            secretName: telemeter-server-shared
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: memcached
    name: memcached
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/name: memcached
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/name: memcached
    name: memcached
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - interval: 30s
      port: metrics
    jobLabel: app.kubernetes.io/name
    selector:
      matchLabels:
        app.kubernetes.io/name: memcached
- apiVersion: apps/v1beta2
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/name: memcached
    name: memcached
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: memcached
    serviceName: memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/name: memcached
      spec:
        containers:
        - args:
          - -m 1024
          - -I 1m
          - -c 1024
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${MEMCACHED_CPU_LIMIT}
              memory: ${MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_CPU_REQUEST}
              memory: ${MEMCACHED_MEMORY_REQUEST}
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          name: memcached-exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
- apiVersion: v1
  data:
    nginx.conf: |
      daemon off;
      worker_processes 1;
      error_log /dev/stderr;
      pid /tmp/nginx.pid;

      events {
          worker_connections 1024;
      }

      http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        server {
          listen *:8080;
          server_name _;
          access_log  /dev/stdout  main;
          error_log /dev/stderr;

          location / {
            proxy_set_header THANOS-TENANT FB870BF3-9F3A-44FF-9BF7-D7A047A52F43;
            proxy_pass http://thanos-receive.${NAMESPACE}.svc.cluster.local:19291;
          }
        }
      }
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-remote-write-proxy-config
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-remote-write-proxy
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: remote-write-proxy
        app.kubernetes.io/name: nginx
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: remote-write-proxy
          app.kubernetes.io/name: nginx
      spec:
        containers:
        - args:
          - -c
          - /config/nginx.conf
          command:
          - nginx
          image: ${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE}:${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION}
          name: remote-write-proxy
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 16Mi
          volumeMounts:
          - mountPath: /config
            name: prometheus-remote-write-proxy-config
            readOnly: true
        volumes:
        - configMap:
            name: prometheus-remote-write-proxy-config
          name: prometheus-remote-write-proxy-config
- apiVersion: monitoring.coreos.com/v1
  kind: Prometheus
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
      prometheus: ams
    name: ams
    namespace: ${NAMESPACE}
  spec:
    baseImage: ${PROMETHEUS_AMS_IMAGE}
    containers: []
    remoteWrite:
    - url: http://prometheus-ams-remote-write-proxy.${NAMESPACE}.svc.cluster.local:8080/api/v1/receive
      writeRelabelConfigs:
      - action: keep
        regex: subscription_labels
        sourceLabels:
        - __name__
    replicas: 1
    resources:
      limits:
        cpu: ${PROMETHEUS_AMS_CPU_LIMIT}
        memory: ${PROMETHEUS_AMS_MEMORY_LIMIT}
      requests:
        cpu: ${PROMETHEUS_AMS_CPU_REQUEST}
        memory: ${PROMETHEUS_AMS_MEMORY_REQUEST}
    ruleSelector:
      matchLabels:
        prometheus: ams
        role: alert-rules
    securityContext: {}
    serviceAccount: prometheus-telemeter
    serviceAccountName: prometheus-telemeter
    serviceMonitorSelector:
      matchLabels:
        prometheus: ams
    version: ${PROMETHEUS_AMS_IMAGE_TAG}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-ams-remote-write-proxy
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: http
    selector:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
      prometheus: ams
    name: prometheus-ams
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: web
      port: 9090
      targetPort: web
    selector:
      prometheus: ams
    sessionAffinity: ClientIP
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-ams
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - interval: 30s
      port: web
    selector:
      matchLabels:
        app.kubernetes.io/instance: ams
        app.kubernetes.io/name: prometheus
parameters:
- name: NAMESPACE
  value: telemeter
- name: THANOS_IMAGE
  value: quay.io/thanos/thanos
- name: THANOS_IMAGE_TAG
  value: v0.9.0
- name: PROXY_IMAGE
  value: openshift/oauth-proxy
- name: PROXY_IMAGE_TAG
  value: v1.1.0
- name: JAEGER_AGENT_IMAGE
  value: jaegertracing/jaeger-agent
- name: JAEGER_AGENT_IMAGE_TAG
  value: 1.14.0
- name: THANOS_RECEIVE_CONTROLLER_IMAGE
  value: quay.io/observatorium/thanos-receive-controller
- name: THANOS_RECEIVE_CONTROLLER_IMAGE_TAG
  value: master-2019-10-18-d55fee2
- name: THANOS_QUERIER_REPLICAS
  value: "3"
- name: THANOS_STORE_REPLICAS
  value: "5"
- name: THANOS_COMPACTOR_REPLICAS
  value: "1"
- name: THANOS_RECEIVE_REPLICAS
  value: "5"
- name: THANOS_CONFIG_SECRET
  value: thanos-objectstorage
- name: THANOS_S3_SECRET
  value: telemeter-thanos-stage-s3
- name: THANOS_QUERIER_CPU_REQUEST
  value: 100m
- name: THANOS_QUERIER_CPU_LIMIT
  value: "1"
- name: THANOS_QUERIER_MEMORY_REQUEST
  value: 256Mi
- name: THANOS_QUERIER_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_QUERIER_CACHE_CPU_REQUEST
  value: 100m
- name: THANOS_QUERIER_CACHE_CPU_LIMIT
  value: "1"
- name: THANOS_QUERIER_CACHE_MEMORY_REQUEST
  value: 256Mi
- name: THANOS_QUERIER_CACHE_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_STORE_CPU_REQUEST
  value: 500m
- name: THANOS_STORE_CPU_LIMIT
  value: "2"
- name: THANOS_STORE_MEMORY_REQUEST
  value: 1Gi
- name: THANOS_STORE_MEMORY_LIMIT
  value: 8Gi
- name: THANOS_RECEIVE_CPU_REQUEST
  value: 100m
- name: THANOS_RECEIVE_CPU_LIMIT
  value: "1"
- name: THANOS_RECEIVE_MEMORY_REQUEST
  value: 512Mi
- name: THANOS_RECEIVE_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_COMPACTOR_CPU_REQUEST
  value: 100m
- name: THANOS_COMPACTOR_CPU_LIMIT
  value: "1"
- name: THANOS_COMPACTOR_MEMORY_REQUEST
  value: 1Gi
- name: THANOS_COMPACTOR_MEMORY_LIMIT
  value: 5Gi
- name: THANOS_RULER_REPLICAS
  value: "2"
- name: THANOS_RULER_CPU_REQUEST
  value: 100m
- name: THANOS_RULER_CPU_LIMIT
  value: "1"
- name: THANOS_RULER_MEMORY_REQUEST
  value: 512Mi
- name: THANOS_RULER_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_QUERIER_SVC_URL
  value: http://thanos-querier.observatorium.svc:9090
- name: JAEGER_PROXY_CPU_REQUEST
  value: 100m
- name: JAEGER_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: JAEGER_PROXY_CPU_LIMITS
  value: 200m
- name: JAEGER_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: AUTHORIZE_URL
  value: https://api.openshift.com/api/accounts_mgmt/v1/cluster_registrations
- name: IMAGE
  value: quay.io/openshift/origin-telemeter
- name: IMAGE_TAG
  value: v4.0
- name: TELEMETER_SERVER_CPU_REQUEST
  value: 100m
- name: TELEMETER_SERVER_CPU_LIMIT
  value: "1"
- name: TELEMETER_SERVER_MEMORY_REQUEST
  value: 500Mi
- name: TELEMETER_SERVER_MEMORY_LIMIT
  value: 1Gi
- name: MEMCACHED_IMAGE
  value: docker.io/memcached
- name: MEMCACHED_IMAGE_TAG
  value: 1.5.20-alpine
- name: MEMCACHED_EXPORTER_IMAGE
  value: docker.io/prom/memcached-exporter
- name: MEMCACHED_EXPORTER_IMAGE_TAG
  value: v0.6.0
- name: MEMCACHED_CPU_REQUEST
  value: 500m
- name: MEMCACHED_CPU_LIMIT
  value: "3"
- name: MEMCACHED_MEMORY_REQUEST
  value: 1329Mi
- name: MEMCACHED_MEMORY_LIMIT
  value: 1844Mi
- name: MEMCACHED_EXPORTER_CPU_REQUEST
  value: 50m
- name: MEMCACHED_EXPORTER_CPU_LIMIT
  value: 200m
- name: MEMCACHED_EXPORTER_MEMORY_REQUEST
  value: 50Mi
- name: MEMCACHED_EXPORTER_MEMORY_LIMIT
  value: 200Mi
- name: TELEMETER_FORWARD_URL
  value: ""
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE
  value: quay.io/app-sre/observatorium-receive-proxy
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION
  value: 14e844d
- name: PROMETHEUS_AMS_IMAGE
  value: quay.io/prometheus/prometheus
- name: PROMETHEUS_AMS_IMAGE_TAG
  value: v2.12.0
- name: PROMETHEUS_AMS_CPU_REQUEST
  value: "0"
- name: PROMETHEUS_AMS_CPU_LIMIT
  value: "0"
- name: PROMETHEUS_AMS_MEMORY_REQUEST
  value: "0"
- name: PROMETHEUS_AMS_MEMORY_LIMIT
  value: "0"
